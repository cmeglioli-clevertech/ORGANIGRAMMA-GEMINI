# üîç CHECK SETUP - ORGANIGRAMMA GEMINI
# Script di verifica ambiente per AI Agents
# Uso: .\check-setup.ps1

Write-Host "üîç VERIFICA AMBIENTE ORGANIGRAMMA GEMINI" -ForegroundColor Cyan
Write-Host "=========================================" -ForegroundColor Cyan

$errors = @()
$warnings = @()

# 1. Verifica Node.js
Write-Host "`nüìã Verifica Node.js..." -ForegroundColor Yellow
$nodeVersion = node --version 2>$null
if (-not $nodeVersion) {
    $errors += "‚ùå Node.js non installato"
} else {
    Write-Host "‚úÖ Node.js: $nodeVersion" -ForegroundColor Green
}

# 2. Verifica npm
$npmVersion = npm --version 2>$null
if (-not $npmVersion) {
    $errors += "‚ùå npm non installato"
} else {
    Write-Host "‚úÖ npm: $npmVersion" -ForegroundColor Green
}

# 3. Verifica package.json
Write-Host "`nüìÑ Verifica package.json..." -ForegroundColor Yellow
if (-not (Test-Path "package.json")) {
    $errors += "‚ùå package.json mancante"
} else {
    $packageJson = Get-Content "package.json" | ConvertFrom-Json
    if ($packageJson.name -eq "interactive-organizational-chart") {
        Write-Host "‚úÖ package.json valido" -ForegroundColor Green
    } else {
        $warnings += "‚ö†Ô∏è  package.json potrebbe essere corrotto"
    }
}

# 4. Verifica node_modules
Write-Host "`nüì¶ Verifica dipendenze..." -ForegroundColor Yellow
if (-not (Test-Path "node_modules")) {
    $warnings += "‚ö†Ô∏è  node_modules mancante - esegui npm install"
} else {
    $packageCount = 0
    try {
        $listOutput = npm list --depth=0 2>$null
        if ($listOutput -match "(\d+) packages") {
            $packageCount = [int]$matches[1]
        }
    } catch {}
    
    if ($packageCount -gt 150) {
        Write-Host "‚úÖ Dipendenze installate: $packageCount pacchetti" -ForegroundColor Green
    } elseif ($packageCount -gt 0) {
        $warnings += "‚ö†Ô∏è  Dipendenze incomplete: solo $packageCount pacchetti (attesi ~171)"
    } else {
        $warnings += "‚ö†Ô∏è  Impossibile verificare dipendenze"
    }
}

# 5. Verifica file .env
Write-Host "`nüîê Verifica configurazione..." -ForegroundColor Yellow
if (Test-Path ".env") {
    Write-Host "‚úÖ File .env presente" -ForegroundColor Green
    $envContent = Get-Content ".env" -Raw
    if ($envContent -match "VITE_SMARTSHEET_TOKEN") {
        Write-Host "‚úÖ Token Smartsheet configurato" -ForegroundColor Green
    } else {
        $warnings += "‚ö†Ô∏è  Token Smartsheet non trovato nel .env"
    }
} else {
    $warnings += "‚ö†Ô∏è  File .env non presente - app user√† dati CSV locali"
}

# 6. Verifica file CSV
Write-Host "`nüìä Verifica dati..." -ForegroundColor Yellow
if (Test-Path "_Suddivisione Clevertech light.csv") {
    Write-Host "‚úÖ Dataset CSV presente" -ForegroundColor Green
} else {
    $errors += "‚ùå File CSV dati mancante"
}

# 7. Verifica porte in uso
Write-Host "`nüåê Verifica porte..." -ForegroundColor Yellow
$port3000 = Get-NetTCPConnection -LocalPort 3000 -ErrorAction SilentlyContinue
$port3001 = Get-NetTCPConnection -LocalPort 3001 -ErrorAction SilentlyContinue

if ($port3000) {
    $warnings += "‚ö†Ô∏è  Porta 3000 gi√† in uso"
} else {
    Write-Host "‚úÖ Porta 3000 disponibile" -ForegroundColor Green
}

if ($port3001) {
    $warnings += "‚ö†Ô∏è  Porta 3001 gi√† in uso"
} else {
    Write-Host "‚úÖ Porta 3001 disponibile" -ForegroundColor Green
}

# 8. Verifica script di avvio
Write-Host "`nüöÄ Verifica script automazione..." -ForegroundColor Yellow
if (Test-Path "start-app.ps1") {
    Write-Host "‚úÖ Script automatico presente" -ForegroundColor Green
} else {
    $warnings += "‚ö†Ô∏è  Script start-app.ps1 mancante"
}

# Riepilogo risultati
Write-Host "`nüìã RIEPILOGO VERIFICA:" -ForegroundColor Cyan
Write-Host "====================" -ForegroundColor Cyan

if ($errors.Count -eq 0) {
    Write-Host "`nüéâ AMBIENTE OK!" -ForegroundColor Green
    Write-Host "Puoi avviare l'app con: .\start-app.ps1" -ForegroundColor White
} else {
    Write-Host "`n‚ùå ERRORI CRITICI:" -ForegroundColor Red
    foreach ($error in $errors) {
        Write-Host "   $error" -ForegroundColor Red
    }
}

if ($warnings.Count -gt 0) {
    Write-Host "`n‚ö†Ô∏è  AVVISI:" -ForegroundColor Yellow
    foreach ($warning in $warnings) {
        Write-Host "   $warning" -ForegroundColor Yellow
    }
}

Write-Host "`nüîß SUGGERIMENTI:" -ForegroundColor White
Write-Host "- Se ci sono errori: installa Node.js/npm" -ForegroundColor Gray
Write-Host "- Se dipendenze incomplete: .\start-app.ps1 (risolve automaticamente)" -ForegroundColor Gray  
Write-Host "- Per Smartsheet sync: crea file .env con token API" -ForegroundColor Gray

exit ($errors.Count)
